


name: Preview catalog
on:
  pull_request_target:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - closed
# do not allow running multiple of pipelines for this PR in parallel
concurrency: preview-${{ github.ref }}
jobs:
  preview_changed_files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      pull-requests: write
      packages: read
    name: Deploy changed-files
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Get commit message from PR head branch
        id: get_pr_commit_message
        run: |
          PR_COMMIT_SHA=${{ github.event.pull_request.head.sha }}
          PR_REPO_OWNER=${{ github.event.pull_request.head.repo.owner.login }}
          PR_REPO_NAME=${{ github.event.pull_request.head.repo.name }}
          # Fetch the commit message from the PR's head branch
          COMMIT_MESSAGE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${PR_REPO_OWNER}/${PR_REPO_NAME}/commits/${PR_COMMIT_SHA}" \
            | jq -r .commit.message)
          # Setting skip flag.
           if [[ "$COMMIT_MESSAGE" == *"create session using empty commit"* ]]; then
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_skip=false" >> "$GITHUB_OUTPUT"
          fi
      -
        if: github.event.action != 'closed' # skip the step if the PR has been closed, just for cleanup
        name: changed-files
        id: changed-files
        uses: tj-actions/changed-files@v45
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 
      -
        if: github.event.action != 'closed' # skip the step if the PR has been closed, just for cleanup
        name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: python .github/update_catalog.py
      -
        if: github.event.action != 'closed' && steps.get_pr_commit_message.outputs.should_skip != 'true'
        name: Build
        env:
            SH_INSTANCE_ID: ${{ secrets.SH_INSTANCE_ID }}
            SH_CLIENT_ID: ${{ secrets.SH_CLIENT_ID }}
            SH_CLIENT_SECRET: ${{ secrets.SH_CLIENT_SECRET }}
        run: |
          docker pull ghcr.io/eodash/eodash_catalog:gp_no_pystac_dev
          docker run -v "$PWD:/workspace" -w "/workspace" -e SH_INSTANCE_ID="$SH_INSTANCE_ID" -e SH_CLIENT_ID="$SH_CLIENT_ID" -e SH_CLIENT_SECRET="$SH_CLIENT_SECRET" ghcr.io/eodash/eodash_catalog:gp_no_pystac_dev eodash_catalog 4D_Greenland_Duration 4D_Greenland_Meltmap 4D_Greenland_Melt_Onset 4D_Greenland_Melt_Season_End ADD_L2_Pine_Island ADD_L2_Thwaites ADD_Landsat_L2_Antarctica ADD_Melt_Duration ADD_Meltmap ADD_Melt_Onset ADD_Melt_Season_End ADD_West_Antarctica_S1 CDS7_windu_ERA5-SingleLevel_100m_GLOBAL CDS8_windv_ERA5-SingleLevel_100m_GLOBAL CV_Covid_19_cases_trilateral E10a1_agricultural_production_productive_area E10a2_agricultural_production_area E10a3_agricultural_production_area_change E10a6_harvested_parcels_evolution E10a8_winter_cereals E10c_rice_planting E10e_ndvi E13b_parked_airplanes E13c_shipping_activity E9_car_containers ENSST_by_GCOM-W-AMSR_JAXA EPA_Field_burning_Monthly EPA_Forest_fire_Methane_Daily EPA_Forest_fire_Methane_Yearly ESDC_gross_primary_productivity ESDC_kndvi ESDC_net_ecosystem_exchange ESDL_Hydrology_Precipitation ESDL_Hydrology_SM facebook_population_density FNF_Palsar GG_Google_Mobility_Data_trilateral GGI_CH4 GGI_CO2 GGI_N2O GHS_BUILT-S-R2023A grdi-cdr-raster grdi-filled-missing-values-count grdi-imr-raster grdi-shdi-raster grdi-v1-built grdi-v1-raster grdi-vnl-raster grdi-vnl-slope-raster HLS_NDVI Lakes_ALOS2_HH Lakes_ALOS2_HV Lakes_ALOS2 Lakes_S2L2A Lakes_Sentinel1 Lakes_SWT Lakes_WQ_TC_water_quality Lakes_WQ_TURB_water_turbidity LIS_Global_DA_Evap LWE_lake_water_extent LWL_lake_water_level MCD_S14Amazonas_detections Modis_SNPP_2023 N10_OMSO2PCA-COG N11_ocean_primary_productivity N12_1_sea_ice_concentration_arctic N12_sea_ice_concentration_antarctic N1_CO N1_methane_monitoring N1_NO2_city_trilateral N1_NO2_diff_monthly N1_NO2_jaxa N1_NO2 N1_NO2_monthly N1_SO2 N2_CO2_diff N2_CO2_jaxa_gosat N2_CO2_mean N2_greenhouse_gases N3a2_chl_concentration_tri_esa N3a2_chl_concentration_tri_jaxa N3a2_chl_concentration_tri_nasa N3a2_sea_surface_temperature N3a2_total_suspended_matter_tri_esa N3a2_total_suspended_matter_tri_jaxa N3a2_total_suspended_matter_tri_nasa N3b_water_quality_chl_chart N3b_water_quality_tsm_chart N5_nightlights N6_geoglam N9_OMI_trno2-COG NASAPopulation nceo_africa_2017 NELST_ECOSTRESS_LST NLK_lake_aral NLK_lake_balaton NLK_lake_biwa NLK_lakes NLK_lake_tonle_sap NLK_lake_vanern NPPN_net_primary_production NPP_ocean_primary_productivity NTLR_JAXA_Nighttimelevel_Rural NTLU_JAXA_Nighttimelevel_Urban OHC300_Ocean_Heat_Content_upper_300m OW_Covid_19_vaccinations_trilateral PRCG_precipitation PRC_precipitation_anomaly PRCTS_precipitation_timeseries RECCAP2_10_intact_biomass_change_smooth_max RECCAP2_11_intact_biomass_change_smooth_mean RECCAP2_12_intact_biomass_change_trend_mean RECCAP2_1_AGC_LVOD_amazonia_methods_mean_crop RECCAP2_2_AGC_LVOD_amazonia_smooth_max_crop RECCAP2_3_AGC_LVOD_amazonia_smooth_mean_crop RECCAP2_4_AGC_LVOD_amazonia_trend_mean_crop RECCAP2_5_SF_biomass_growth RECCAP2_6_deforested_biomass RECCAP2_7_degraded_biomass RECCAP2_8_edge_biomass_change RECCAP2_9_intact_biomass_change_methods_mean SIC_sea_ice_thickness_cryosat SIE_sea_ice_thickness_envisat SIF_solar_induced_chlorophyll_fluorescence SITI_IS2SITMOGR4-cog SLSTR1_Sentinel-3-SLSTR-L2-LST SMCG_soil_moisture_content SMC_soil_moisture_anomaly SMCTS_soil_moisture_timeseries SSLC1_Seasonal_S1_AMP_hv_interferometric_coherence SSLC2_Seasonal_S1_COH12_hh_interferometric_coherence VITS_vegetation_index_timeseries WSF_world_settlement_footprint_ind
      - if: steps.get_pr_commit_message.outputs.should_skip != 'true'
        name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
          comment: false
      -
        if: github.event.action != 'closed' && steps.get_pr_commit_message.outputs.should_skip != 'true'
        name: Find existing comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions
          body-includes: 'üöÄ Preview ready!'
      -
        if: github.event.action != 'closed' && steps.get_pr_commit_message.outputs.should_skip != 'true'
        name: Create or update preview comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üöÄ Preview ready!

            üëâ [View your dashboard preview](https://eodash.github.io/preview-instance/?stacEndpoint=https://esa-eodashboards.github.io/eodashboard-catalog/pr-preview/pr-${{ github.event.pull_request.number }}/trilateral/catalog.json )
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
      -
        if: github.event.action != 'closed' && steps.get_pr_commit_message.outputs.should_skip != 'true'
        name: Wait for GitHub Pages deployment workflow
        run: |
          echo "Waiting for GitHub Pages deployment to complete..."
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          DELAY=10
      
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs \
              | jq '.workflow_runs[] | select(.name=="pages build and deployment")' \
              | jq -s 'sort_by(.run_started_at) | reverse | .[0]')
      
            STATUS=$(echo "$RUN" | jq -r '.status')
            CONCLUSION=$(echo "$RUN" | jq -r '.conclusion')
      
            echo "Current pages-build-deployment status: $STATUS / $CONCLUSION"
      
            if [[ "$STATUS" == "completed" ]]; then
              if [[ "$CONCLUSION" == "success" ]]; then
                echo "‚úÖ GitHub Pages deployment completed successfully."
                exit 0
              else
                echo "‚ùå GitHub Pages deployment failed."
                exit 1
              fi
            fi
      
            ATTEMPTS=$((ATTEMPTS+1))
            sleep $DELAY
          done
      
          echo "‚ö†Ô∏è Timed out waiting for GitHub Pages deployment."
          exit 1
